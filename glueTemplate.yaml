AWSTemplateFormatVersion: '2010-09-09'

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          import json
          import urllib
          import boto3
          import csv
          from netaddr import IPNetwork, IPAddress
          from datetime import datetime


          s3 = boto3.client('s3')


          def read_csv(filename):
              with open(filename) as csv_file:
                  csv_reader = csv.reader(csv_file, delimiter=',')
                  ips = []
                  for row in csv_reader:
                      ips.append(row[0])
              ips = ips[1:]
              return ips


          def lambda_handler(event, context):
              
              # get bucket name and key from event object
              bucket = event['Records'][0]['s3']['bucket']['name']
              key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')
              
              try:
                  # read csv file contains CIDRs
                  ips = read_csv('smac-ips.csv')
                  
                  # get log files
                  res = s3.get_object(Bucket=bucket, Key=key)['Body'].read().decode()
                  
                  # preprocess log files
                  lines = res.split('\n')
                  lines = [i for i in lines if len(i.split(' ')) >= 3]
                  
                  # filtering logs
                  filter_logs = list(filter(lambda x: all([x.split(' ')[3] not in IPNetwork(i) for i in ips if len(x.split(' ')[3].split('.'))==4]), lines))
                  filter_logs = '\n'.join(filter_logs)
                  filter_logs = filter_logs.encode('utf-8')
                  
                  # Sending logs to Output bucket
                  response = s3.put_object(Bucket='smac-output-flow-logs', Body=filter_logs, Key=f'smac_flowlog_{str(datetime.now())}.log')
                  print(response)
                  return {'msg': 'Success'}
              except Exception as ex:
                  print(ex)
                  return {'msg': 'Failed'}
      Description: test lambda
      FunctionName: gluelambda
      Handler: test_handler
      Role: arn:aws:iam::337769067848:role/LambdaFullAccess
      Runtime: python3.8 